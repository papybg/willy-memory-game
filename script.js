// script.js
document.addEventListener('DOMContentLoaded', () => {
    // –û–±–µ–∫—Ç –∑–∞ –ø—Ä–µ–≤–æ–¥ –Ω–∞ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞ —Ç–µ–º–∏—Ç–µ
    const THEME_TRANSLATIONS = {
        –ø—Ä–µ–≤–æ–∑–Ω–∏_—Å—Ä–µ–¥—Å—Ç–≤–∞: '–ü–†–ï–í–û–ó–ù–ò –°–†–ï–î–°–¢–í–ê',
        animals: '–ñ–ò–í–û–¢–ù–ò',
        flowers: '–¶–í–ï–¢–Ø'
    };

    // üéØ DOM –µ–ª–µ–º–µ–Ω—Ç–∏
    const themeRadios = document.querySelectorAll('input[name="theme"]');
    const countRadios = document.querySelectorAll('input[name="count"]');
    const startGameBtn = document.getElementById('startGameBtn');
    const optionsContainer = document.getElementById('optionsContainer');

    const gameTitleEl = document.getElementById('gameTitle');
    const messageDisplay = document.getElementById('gameMessage');
    const startBtn = document.getElementById('start');
    const reloadBtn = document.getElementById('reload');
    const backToMenuBtn = document.getElementById('backToMenu');
    const allPicsEl = document.getElementById('allPics');
    const gamePicsEl = document.getElementById('gamePics');
    const containerEl = document.getElementById('container');
    const controlsEl = document.getElementById('controls');
    
    let ALL_THEMES = {};

    // üéØ –ü—Ä–æ–º–µ–Ω–ª–∏–≤–∏ –∑–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –∏–≥—Ä–∞—Ç–∞
    const gameState = {
        currentThemeImages: [],
        numberOfPics: 0,
        selectedGamePics: [],
        hiddenImageElement: null,
        originalHiddenImageSrc: '',
        originalHiddenImageName: '',
        awaitingChoice: false,
    };

    // –ê—É–¥–∏–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞ —É—Å–ø–µ—Ö –∏ –≥—Ä–µ—à–∫–∞
    const bravoAudio = new Audio('audio/bravo_uily.wav');
    const opitaiPakAudio = new Audio('audio/opitaj_pak.wav');

    // --- –§—É–Ω–∫—Ü–∏–∏ ---

    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    function updateStartButtonState() {
        const themeSelected = Array.from(themeRadios).some(r => r.checked);
        const countSelected = Array.from(countRadios).some(r => r.checked);
        startGameBtn.disabled = !(themeSelected && countSelected);
    }

    function startGame() {
        // –°–º—è–Ω–∞ –Ω–∞ —Ñ–æ–Ω–∞ –∑–∞ –∏–≥—Ä–∞–ª–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        document.body.classList.remove('bg-menu');
        document.body.classList.add('bg-game');

        const selectedTheme = document.querySelector('input[name="theme"]:checked').value;
        const themeDisplayName = THEME_TRANSLATIONS[selectedTheme] || selectedTheme.replace('_', ' ').toUpperCase();

        gameState.numberOfPics = parseInt(document.querySelector('input[name="count"]:checked').value);
        gameState.currentThemeImages = ALL_THEMES[selectedTheme];

        gameTitleEl.textContent = `–ü–æ–∑–Ω–∞–π ${themeDisplayName}!`;
        
        optionsContainer.classList.add('hidden');
        controlsEl.classList.remove('hidden');
        containerEl.classList.remove('hidden');

        renderGamePics();
        renderAllPics();
        resetGameState();
    }

    function renderAllPics() {
        allPicsEl.innerHTML = '';
        gameState.currentThemeImages.forEach(name => {
            const img = document.createElement('img');
            img.src = 'images/' + name;
            img.dataset.name = name;
            img.alt = name.replace('.jpg', '');
            img.addEventListener('click', chooseHandler);
            allPicsEl.appendChild(img);
        });
    }

    function renderGamePics() {
        gamePicsEl.innerHTML = ''; 
        const shuffledImages = shuffleArray([...gameState.currentThemeImages]);
        gameState.selectedGamePics = shuffledImages.slice(0, gameState.numberOfPics);

        gameState.selectedGamePics.forEach((name, idx) => {
            const img = document.createElement('img');
            img.src = 'images/' + name;
            img.dataset.idx = idx;
            img.dataset.name = name;
            img.alt = name.replace('.jpg', '');
            gamePicsEl.appendChild(img);
        });
    }
    
    function hideRandomPicture() {
        if (gameState.awaitingChoice) return;
        restoreHiddenImage();

        const hiddenIndex = Math.floor(Math.random() * gameState.numberOfPics);
        gameState.hiddenImageElement = gamePicsEl.querySelectorAll('img')[hiddenIndex]; 

        gameState.originalHiddenImageSrc = gameState.hiddenImageElement.src;
        gameState.originalHiddenImageName = gameState.hiddenImageElement.dataset.name;
        
        gameState.hiddenImageElement.classList.add('fading-out');

        setTimeout(() => {
            if (gameState.hiddenImageElement) {
                gameState.hiddenImageElement.src = 'images/hide.png';
                gameState.hiddenImageElement.dataset.name = 'hide.png';
                gameState.hiddenImageElement.alt = '–°–∫—Ä–∏—Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞';
                gameState.hiddenImageElement.classList.remove('fading-out');
            }
        }, 1500);

        gameState.awaitingChoice = true;
        startBtn.classList.add('hidden');
        showMessage('–ü–æ–∑–Ω–∞–π –∫–æ–µ –ª–∏–ø—Å–≤–∞!', 'info');
    }

    function chooseHandler(e) {
        if (!gameState.awaitingChoice) return;

        const chosen = e.target.dataset.name;
        const hidden = gameState.originalHiddenImageName; 

        if (chosen === hidden) {
            showMessage('–ë—Ä–∞–≤–æ!', 'success');
            bravoAudio.currentTime = 0; 
            bravoAudio.play().catch(e => console.error("Error playing audio:", e));
            
            restoreHiddenImage();

            gameState.awaitingChoice = false;
            reloadBtn.classList.remove('hidden');
            startBtn.classList.add('hidden');
        } else {
            showMessage('–û–ø–∏—Ç–∞–π –ø–∞–∫!', 'error');
            opitaiPakAudio.currentTime = 0; 
            opitaiPakAudio.play().catch(e => console.error("Error playing audio:", e));
        }
    }

    function showMessage(text, type) {
        messageDisplay.className = 'gameMessage';
        messageDisplay.textContent = text;
        
        setTimeout(() => {
            messageDisplay.classList.add('message-animate', `message-${type}`);
        }, 10);
    }

    function restoreHiddenImage() {
        if (gameState.hiddenImageElement && gameState.originalHiddenImageSrc) {
            gameState.hiddenImageElement.src = gameState.originalHiddenImageSrc;
            gameState.hiddenImageElement.dataset.name = gameState.originalHiddenImageName;
            gameState.hiddenImageElement.alt = gameState.originalHiddenImageName.replace('.jpg', '');
            gameState.hiddenImageElement.classList.remove('fading-out');
        }
    }

    function resetGameState() {
        restoreHiddenImage();
        
        gameState.awaitingChoice = false;
        gameState.hiddenImageElement = null; 
        gameState.originalHiddenImageSrc = '';
        gameState.originalHiddenImageName = '';

        showMessage('–ù–∞—Ç–∏—Å–Ω–∏ "–°–ö–†–ò–ô –ö–ê–†–¢–ò–ù–ê" –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—à.', 'info');
        
        reloadBtn.classList.add('hidden');
        startBtn.classList.remove('hidden');
        startBtn.disabled = false;
    }

    function goBackToMenu() {
        // –°–º—è–Ω–∞ –Ω–∞ —Ñ–æ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ –∫—ä–º —Ç–æ–∑–∏ –∑–∞ –º–µ–Ω—é—Ç–æ
        document.body.classList.remove('bg-game');
        document.body.classList.add('bg-menu');

        gameTitleEl.textContent = '–ü–æ–∑–Ω–∞–π –ö–ê–†–¢–ò–ù–ö–ê–¢–ê!';
        controlsEl.classList.add('hidden');
        containerEl.classList.add('hidden');
        optionsContainer.classList.remove('hidden');
        showMessage('', 'info');
    }
    
    async function initializeApp() {
        // –°–ª–∞–≥–∞–º–µ –Ω–∞—á–∞–ª–Ω–∏—è —Ñ–æ–Ω –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
        document.body.classList.add('bg-menu');
        try {
            const response = await fetch('themes.json');
            if (!response.ok) {
                throw new Error(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º—Ä–µ–∂–∞—Ç–∞: ${response.statusText}`);
            }
            ALL_THEMES = await response.json();

            // --- –°–ª—É—à–∞—Ç–µ–ª–∏ –Ω–∞ —Å—ä–±–∏—Ç–∏—è ---
            themeRadios.forEach(r => r.addEventListener('change', updateStartButtonState));
            countRadios.forEach(r => r.addEventListener('change', updateStartButtonState));
            startGameBtn.addEventListener('click', startGame);
            startBtn.addEventListener('click', hideRandomPicture);
            reloadBtn.addEventListener('click', () => {
                renderGamePics();
                resetGameState();
            });
            backToMenuBtn.addEventListener('click', goBackToMenu);

            // --- –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
            updateStartButtonState();
            
        } catch (error) {
            console.error("–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–µ–º–∏—Ç–µ:", error);
            gameTitleEl.textContent = '–ì–†–ï–®–ö–ê';
            optionsContainer.innerHTML = `<p style="color: var(--error-color);">–ù–µ—â–æ —Å–µ –æ–±—ä—Ä–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ—Ç–æ –Ω–∞ —Ç–µ–º–∏—Ç–µ –∑–∞ –∏–≥—Ä–∞—Ç–∞. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –¥–∞ –ø—Ä–µ–∑–∞—Ä–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞.</p>`;
        }
    }

    initializeApp();
});
